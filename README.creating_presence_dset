########################################################
#                                                      #
#                        XDRMAPS                       #
#                                                      #
#  TOOL FOR PARSING TRR/XTC TRAJECTORIES AND CREATING  #
#     GRIDS CONTAINING THE SPATIAL DISTRIBUTION OF     #
#              SELECTED ATOMIC PROPERTIES              #
#                                                      #
########################################################

VERSION: 2017031400
AUTHOR: Veselin Kolev <vesso.kolev@gmail.com>
LICENSE: GPLv2


SUPPLYING ATOM PRESENCE TO THE TOOLS

In the terminology used in this package the presence is an object which
has almost the same application as the index (ndx) files in GROMACS.
The goal is to provide a mechanism to specify which of the atoms
participating in the processed topology should be traced for the needs
of the the grid statistics process.

The specification of the selection object is very simple. It is an
array of integer numbers which size is equal to the total number of
atoms in the topology. Each array element have to be assigned value 0
if the corresponding atom should be excluded from the statistics, and
1 - otherwise.

The presence array have to be stored on a file system as HDF5 data set
with name "presence" and data type H5T_STD_I64LE. The file containing
that dataset is supplied as an invoking (starting) parameter to the
tool xdrmaps.

The example scripts:

create_atomic_mass_dset.py
create_presence_dset_default.py
create_presence_dset_resname_aname.py
create_presence_dset_resname.py

which are located in the python/ folder in this package, show examples
on how to to create default or specific presence file in Python 2.


AN IMPORTANT NOTE REGARDING THE INDEXING OF THE ARRAY WITH ATOM PRESENCE

IT IS MANDATORY! When preparing the array with the presences, always use
as a reference GRO or PDB file taken from the trajectory which will be
processed. That can be done by the GROMACS tool trjconv:

gmx trjconv -f traj.trr -s topol.tpr -o trajout.gro -b 0 -e 0

if the starting time of the simulation is 0.000, change it otherwise.

If the GRO file atom coordinate section contains 6 rows:

    1GMO     O2    1   7.445   8.120   4.792  0.3384  0.5108  0.1254
    1GMO     H2    1   7.394   8.052   4.835 -1.7992  1.5276 -0.6570
    1GMO    C20    1   7.389   8.231   4.850 -0.6080  0.0839  0.0727
    1GMO     H6    1   7.436   8.326   4.817  2.7133 -0.6428  2.2186
    1GMO     H7    1   7.415   8.222   4.958  1.4281  1.6845 -0.2137
    1GMO    C19    1   7.231   8.248   4.840 -0.0945 -0.6635 -0.2032

the connection between the atom serial numbers and the indexes in the
atom presence array is established as:

atom serial number (row number) : 1 2 3 4 5 6
index in the mass array         : 0 1 2 3 4 5

If all atoms should take part in the statistics the resulting presence
array will look like:

presence[0]=1
presence[1]=1
presence[2]=1
presence[3]=1
presence[4]=1
presence[5]=1

If only the H-atoms need to be processed during the collection of the
grid statistics, the corresponding presence array will be:

presence[0]=0
presence[1]=1
presence[2]=0
presence[3]=1
presence[4]=1
presence[5]=0

The actual atom serial number is the corresponding row number of the
atom in the coordinate section in the PDB or GRO file! The first row
in that section is assigned row number 1. Do not use the atom serial
number stored in the column designated for storing atom serial
numbers (both GRO and PBD standards define such a column). That
column in no more read by the modern MD and MC tools. The reason is
its limited width that prevents it from accommodating integer
numbers greater then 99999. Nowadays a large amount of simulations
operate on large systems containing more than 99999 atoms.
